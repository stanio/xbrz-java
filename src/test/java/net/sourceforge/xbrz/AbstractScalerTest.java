package net.sourceforge.xbrz;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.awt.image.BufferedImage;
import java.io.IOException;

import javax.imageio.ImageIO;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestName;

import net.sourceforge.xbrz.Xbrz.ScalerCfg;

public abstract class AbstractScalerTest {

    private static class BufferedYCbCr {
        static ColorDistance colorDistance = ColorDistance.bufferedYCbCr(5);
    }

    @Rule
    public TestName testName = new TestName();

    protected abstract Xbrz xbrz();

    @Test
    public void basicShapes() throws Exception {
        testImage("test/basic-shapes");
    }

    @Test
    public void fullPicture() throws Exception {
        // Reference images generated by the original ScalerTest tool
        // appear to differ slightly - likely the YCbCr color distance
        // calculation varies between Java and C++.
        //testImage("test/gbamockup", 1.0);
        testImage(new Xbrz(xbrz().scale(), false), "test/gbamockup", 0.001);
    }

    @Test
    public void someAlpha() throws Exception {
        testImage("test/down-arrow");
    }

    @Test
    public void alphaAtImageBoundary() throws Exception {
        testImage("test/open-folder");
    }

    @Test
    public void colorDistanceRGB() throws Exception {
        // Expected result differences around some edges.
        testImage(new Xbrz(xbrz().scale(), false,
                new ScalerCfg(), ColorDistance.rgb()), "test/gbamockup", 3.0);
    }

    @Test
    public void colorDistanceYCbCrBuffered() throws Exception {
        // Expected result differences around some edges.
        testImage(new Xbrz(xbrz().scale(), false,
                new ScalerCfg(), BufferedYCbCr.colorDistance), "test/gbamockup", 3.0);
    }

    @Test
    public void alhpaNoAlpha() throws Exception {
        BufferedImage source = ImageIO.read(AbstractScalerTest.class.getResource("test/gbamockup.png"));
        int srcWidth = source.getWidth();
        int srcHeight = source.getHeight();
        int[] srcPixels = new int[srcWidth * srcHeight];
        source.getRGB(0, 0, srcWidth, srcHeight, srcPixels, 0, srcWidth);

        int factor = xbrz().scale();
        int destWidth = srcWidth * factor;
        int destHeight = srcHeight * factor;
        int[] destPixels = new int[destWidth * destHeight];
        new Xbrz(factor, true).scaleImage(srcPixels, destPixels, srcWidth, srcHeight);

        int[] dest2Pixels = new int[destWidth * destHeight];
        new Xbrz(factor, false).scaleImage(srcPixels, dest2Pixels, srcWidth, srcHeight);

        // Differences on image borders expected.
        assertPixels(testName.getMethodName(), destPixels, dest2Pixels, 1.0);
    }

    private void testImage(String name) throws IOException {
        testImage(name, 0.0001);
    }

    private void testImage(String name, double deviation) throws IOException {
        testImage(xbrz(), name, deviation);
    }

    private void testImage(Xbrz xbrz, String imageName, double deviation) throws IOException {
        final int factor = xbrz.scale();

        BufferedImage source = ImageIO.read(AbstractScalerTest.class.getResource(imageName + ".png"));
        int srcWidth = source.getWidth();
        int srcHeight = source.getHeight();
        int[] srcPixels = new int[srcWidth * srcHeight];
        source.getRGB(0, 0, srcWidth, srcHeight, srcPixels, 0, srcWidth);

        int destWidth = srcWidth * factor;
        int destHeight = srcHeight * factor;
        int[] destPixels = new int[destWidth * destHeight];
        xbrz.scaleImage(srcPixels, destPixels, srcWidth, srcHeight);

        BufferedImage reference = ImageIO.read(AbstractScalerTest.class.getResource(imageName + "@" + factor + "xbrz.png"));
        int[] refPixels = new int[reference.getWidth() * reference.getHeight()];
        reference.getRGB(0, 0, reference.getWidth(), reference.getHeight(), refPixels, 0, reference.getWidth());
        assertPixels(testName.getMethodName(), destPixels, refPixels, deviation);
    }

    private static void assertPixels(String name, int[] destPixels, int[] refPixels, double deviation) {
        assertEquals("pixels size", refPixels.length, destPixels.length);
        int mismatch = 0;
        for (int i = 0, len = refPixels.length; i < len; i++) {
            if (destPixels[i] != refPixels[i]) {
                mismatch += 1;
            }
        }
        double percent = mismatch * 100.0 / destPixels.length;
        String message = String.format("Pixel mismatch: %d (%.3f%%)", mismatch, percent);
        System.out.printf("%s [%s]%n", message, name);
        assertTrue(message, percent <= deviation);
    }
    
}
